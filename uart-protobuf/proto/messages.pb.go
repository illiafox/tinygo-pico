// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: messages.proto

package whisperpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ServerEvent struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Event:
	//
	//	*ServerEvent_DisplayEvent
	Event         isServerEvent_Event `protobuf_oneof:"event"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ServerEvent) Reset() {
	*x = ServerEvent{}
	mi := &file_messages_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServerEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerEvent) ProtoMessage() {}

func (x *ServerEvent) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerEvent.ProtoReflect.Descriptor instead.
func (*ServerEvent) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{0}
}

func (x *ServerEvent) GetEvent() isServerEvent_Event {
	if x != nil {
		return x.Event
	}
	return nil
}

func (x *ServerEvent) GetDisplayEvent() *DisplayEvent {
	if x != nil {
		if x, ok := x.Event.(*ServerEvent_DisplayEvent); ok {
			return x.DisplayEvent
		}
	}
	return nil
}

type isServerEvent_Event interface {
	isServerEvent_Event()
}

type ServerEvent_DisplayEvent struct {
	DisplayEvent *DisplayEvent `protobuf:"bytes,1,opt,name=display_event,json=displayEvent,proto3,oneof"`
}

func (*ServerEvent_DisplayEvent) isServerEvent_Event() {}

type DisplayEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Text          string                 `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DisplayEvent) Reset() {
	*x = DisplayEvent{}
	mi := &file_messages_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DisplayEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisplayEvent) ProtoMessage() {}

func (x *DisplayEvent) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisplayEvent.ProtoReflect.Descriptor instead.
func (*DisplayEvent) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{1}
}

func (x *DisplayEvent) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

var File_messages_proto protoreflect.FileDescriptor

const file_messages_proto_rawDesc = "" +
	"\n" +
	"\x0emessages.proto\x12\awhisper\"T\n" +
	"\vServerEvent\x12<\n" +
	"\rdisplay_event\x18\x01 \x01(\v2\x15.whisper.DisplayEventH\x00R\fdisplayEventB\a\n" +
	"\x05event\"\"\n" +
	"\fDisplayEvent\x12\x12\n" +
	"\x04text\x18\x01 \x01(\tR\x04textB?Z=github.com/illiafox/tinygo-pico/uart-protobuf/proto;whisperpbb\x06proto3"

var (
	file_messages_proto_rawDescOnce sync.Once
	file_messages_proto_rawDescData []byte
)

func file_messages_proto_rawDescGZIP() []byte {
	file_messages_proto_rawDescOnce.Do(func() {
		file_messages_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_messages_proto_rawDesc), len(file_messages_proto_rawDesc)))
	})
	return file_messages_proto_rawDescData
}

var file_messages_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_messages_proto_goTypes = []any{
	(*ServerEvent)(nil),  // 0: whisper.ServerEvent
	(*DisplayEvent)(nil), // 1: whisper.DisplayEvent
}
var file_messages_proto_depIdxs = []int32{
	1, // 0: whisper.ServerEvent.display_event:type_name -> whisper.DisplayEvent
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_messages_proto_init() }
func file_messages_proto_init() {
	if File_messages_proto != nil {
		return
	}
	file_messages_proto_msgTypes[0].OneofWrappers = []any{
		(*ServerEvent_DisplayEvent)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_messages_proto_rawDesc), len(file_messages_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_messages_proto_goTypes,
		DependencyIndexes: file_messages_proto_depIdxs,
		MessageInfos:      file_messages_proto_msgTypes,
	}.Build()
	File_messages_proto = out.File
	file_messages_proto_goTypes = nil
	file_messages_proto_depIdxs = nil
}
